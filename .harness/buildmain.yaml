pipeline:
    name: build-main
    identifier: buildmain
    projectIdentifier: SpringBootAdmin
    orgIdentifier: default
    tags: {}
    properties:
        ci:
            codebase:
                connectorRef: account.Github
                repoName: spring-boot-admin
                build: <+input>
    stages:
        - stage:
              name: build
              identifier: build
              type: CI
              spec:
                  cloneCodebase: true
                  sharedPaths:
                      - ~/.m2/repository
                  infrastructure:
                      type: KubernetesDirect
                      spec:
                          connectorRef: account.EKS
                          namespace: harness-delegate-ng
                          automountServiceAccountToken: true
                          nodeSelector: {}
                          os: Linux
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: echo
                                identifier: echo
                                spec:
                                    connectorRef: account.harnessImage
                                    image: bash:latest
                                    shell: Bash
                                    command: echo "Hello"
                          - step:
                                type: RunTests
                                name: Unit Tests
                                identifier: Unit_Tests
                                spec:
                                    connectorRef: account.harnessImage
                                    image: eclipse-temurin:latest
                                    language: Java
                                    buildTool: Maven
                                    args: clean test
                                    runOnlySelectedTests: true
                                    preCommand: |
                                        #ET-SETUP-BEGIN
                                        PROJ_DIR=$PWD
                                        cd /opt
                                        arch=`uname -m`
                                        if [ $arch = "x86_64" ]; then
                                          wget -qO- https://get.et.harness.io/releases/latest/nix/harness-et-agent.tar.gz | tar -xz
                                        elif [ $arch = "aarch64" ]; then
                                          wget -qO- https://get.et.harness.io/releases/latest/arm/harness-et-agent.tar.gz | tar -xz
                                        fi
                                        export ET_COLLECTOR_URL=https://app.harness.io/gratis/et-collector
                                        export ET_APPLICATION_NAME=$HARNESS_PIPELINE_ID
                                        export ET_ENV_ID=_INTERNAL_ET_CI
                                        export ET_DEPLOYMENT_NAME=$HARNESS_BUILD_ID
                                        export ET_ACCOUNT_ID=$HARNESS_ACCOUNT_ID
                                        export ET_ORG_ID=$HARNESS_ORG_ID
                                        export ET_PROJECT_ID=$HARNESS_PROJECT_ID
                                        #export ET_SHUTDOWN_GRACETIME=30000
                                        export JAVA_TOOL_OPTIONS="-agentpath:/opt/harness/lib/libETAgent.so"
                                        cd $PROJ_DIR
                                        #ET-SETUP-END
                                    reports:
                                        type: JUnit
                                        spec:
                                            paths:
                                                - "**/*.xml"
